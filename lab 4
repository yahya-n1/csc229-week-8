public class LabWeek04 {

    // --------- Task 01 ---------

    // Original countdown
    static void countDown(int num) {
        if (num == 0)
            System.out.println("Blastoff!");
        else {
            System.out.println("...");
            countDown(num - 1);
        }
    }

    // Modified countdown to print only even numbers
    static void countDownEven(int num) {
        if (num == 0) {
            System.out.println("Blastoff!");
        } else {
            if (num % 2 == 0) {
                System.out.println(num);
            }
            countDownEven(num - 1);
        }
    }

    // --------- Task 02 ---------

    // GCD using modulo operator
    static int gcd(int x, int y) {
        if (x % y == 0)
            return y;
        else
            return gcd(y, x % y);
    }

    // GCD using subtraction method
    static int gcdSubtraction(int x, int y) {
        if (x == y)
            return x;
        else if (x > y)
            return gcdSubtraction(x - y, y);
        else
            return gcdSubtraction(x, y - x);
    }

    // --------- Task 03 ---------

    // Fibonacci using naive recursion
    static int fib(int n) {
        if (n <= 0)
            return 0;
        else if (n == 1)
            return 1;
        else
            return fib(n - 1) + fib(n - 2);
    }

    // --------- Homework ---------

    // 1. Print "Hello World" n times recursively
    static void printHello(int n) {
        if (n <= 0) return;
        System.out.println("Hello World");
        printHello(n - 1);
    }

    // 2. Return the sum of all numbers between n1 and n2 that are multiples of 7
    static int sumMultiplesOf7(int n1, int n2) {
        if (n1 > n2) return 0;
        if (n1 % 7 == 0)
            return n1 + sumMultiplesOf7(n1 + 1, n2);
        else
            return sumMultiplesOf7(n1 + 1, n2);
    }

    // 3. Recursive binary search algorithm
    static int binarySearch(int[] arr, int target, int left, int right) {
        if (left > right) return -1;

        int mid = left + (right - left) / 2;

        if (arr[mid] == target)
            return mid;
        else if (target < arr[mid])
            return binarySearch(arr, target, left, mid - 1);
        else
            return binarySearch(arr, target, mid + 1, right);
    }

    // --------- Main Method to Test ---------
    public static void main(String[] args) {
        System.out.println("Task 01: countDown(3)");
        countDown(3);

        System.out.println("\nTask 01 Modified: countDownEven(6)");
        countDownEven(6);

        System.out.println("\nTask 02: gcd(48, 18) → " + gcd(48, 18));
        System.out.println("Task 02 Modified (Subtraction): gcdSubtraction(48, 18) → " + gcdSubtraction(48, 18));

        System.out.println("\nTask 03: fib(6) → " + fib(6));

        System.out.println("\nHomework 1: printHello(3)");
        printHello(3);

        System.out.println("\nHomework 2: sumMultiplesOf7(1, 30) → " + sumMultiplesOf7(1, 30));

        System.out.println("\nHomework 3: binarySearch");
        int[] arr = {1, 3, 5, 7, 9, 11, 13};
        int target = 7;
        int index = binarySearch(arr, target, 0, arr.length - 1);
        System.out.println("Index of " + target + ": " + index);
    }
}
